акцояихлос efarmogi3
стахеяес
	MAX_N=10;
дедолема 
	P: ARRAY[1..MAX_N] OF INTEGER;
    SIZE,in: INTEGER;
	exit2: BOOLEAN;

	
сумаятгсг get_integer(start,finish): INTEGER	
диепажг				
   еисодос			 
      start,finish: INTEGER;			  
   енодос			
      get_integer: INTEGER;
дедолема
		x:INTEGER;
аявг				
   
	епамакабе
		тупысе ("дЧСЕ щМАМ АЯИХЛЭ АПЭ ", start, " щЫР ", finish, ": ");
		диабасе(x);
		
		еам (x<start OR x>finish) тоте
			тупысе("кэХОР ЕъСОДОР. ");
		еам-текос
	левяи (x>=start AND x<=finish)
	
	get_integer:=x;
текос-сумаятгсгс

	
	
диадийасиа read_array(%PIN,N)
диепажг				
   еисодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
	  N: INTEGER;
   енодос			
      PIN: ARRAY[1..MAX_N] OF INTEGER;
дедолема
	i: INTEGER;
аявг				
	циа i:=1 еыс N епамакабе
		тупысе("дЧСЕ ТОМ ", i, "-О АЯИХЛЭ: ");
		диабасе(PIN[i]);
	циа-текос
текос-диадийасиас



диадийасиа print_array(PIN,N)
диепажг				
   еисодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
	  N: INTEGER;
дедолема
	i: INTEGER;
аявг				
	тупысе(EOLN,"PIN=[");
	циа i:=1 еыс N епамакабе
		тупысе (PIN[i], " ");
	циа-текос
	тупысе("]");
текос-диадийасиас

диадийасиа swap(%x,%y)
диепажг				
   еисодос			 
      x,y: INTEGER;			  
   енодос			
      x,y: INTEGER;
дедолема
	temp: INTEGER;
аявг				
	temp:=x;
	x:=y;
	y:=temp;
текос-диадийасиас




диадийасиа selection_sort(%PIN,N)
диепажг				
   еисодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
	  N: INTEGER;
   енодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
дедолема
	i,j,pos: INTEGER;
аявг				
	циа i:=1 еыс N епамакабе
	   /* аМАФчТГСГ ЕКАВъСТОУ СТИР 
		  ХщСЕИР j=i+1┘N   */
	   pos:=i;
	   циа j:=i+1 еыс N епамакабе
		  еам (PIN[j]<PIN[pos]) тоте
			 pos:=j;
		  еам-текос
	   циа-текос

	   /* аМТАККАЦч ТОУ ЕКАВъСТОУ ЛЕ 
		  ТО PIN[i] */
	   упокоцисе swap(%PIN[i],%PIN[pos]);
	циа-текос
текос-диадийасиас





диадийасиа insertion_sort(%PIN,N)
диепажг				
   еисодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
	  N: INTEGER;
   енодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
дедолема
	i,j: INTEGER;
	check:BOOLEAN;
аявг				
	циа i:=2 еыс N епамакабе

		j:=i; 
		check:=FALSE;
		
		емосы (j>=1 AND check=FALSE) епамакабе
			еам (PIN[j]<PIN[j-1]) тоте
				упокоцисе swap(%PIN[j],%PIN[j-1]);
			аккиыс
				check:=TRUE;
			еам-текос
			j:=j-1;
		емосы-текос
	циа-текос
текос-диадийасиас



диадийасиа bubble_sort(%PIN,N)
диепажг				
   еисодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
	  N: INTEGER;
   енодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
дедолема
	i,j: INTEGER;
аявг				
	циа i:=1 еыс N епамакабе
	 
	   циа j:=N еыс i+1 ле-бгла -1 епамакабе

		  еам (PIN[j]<PIN[j-1]) тоте
			упокоцисе swap(%PIN[j],%PIN[j-1]);
		  еам-текос

	   циа-текос

	циа-текос
текос-диадийасиас




диадийасиа merge(%PIN,start,finish)
диепажг				
   еисодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
	  start,finish: INTEGER;
   енодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
дедолема
	C: ARRAY[1..MAX_N] OF INTEGER;
	middle: INTEGER;
	i,j,k:INTEGER;
	n: INTEGER;
	m: INTEGER;
аявг
	middle:=(start+finish) DIV 2;
	/* 1ОР ПъМАЙАР PIN[start...middle]*/
	i:=start;
	n:=middle;
	/* 2ОР ПъМАЙАР PIN[middle+1...finish]*/
	j:=middle+1;
	m:=finish;
	/* C: СУЦВЫМЕУЛщМОР ПъМАЙАР */
	k:=1;
	емосы (i<=n AND j<=m) епамакабе
		еам (PIN[i]<PIN[j]) тоте
			C[k]:=PIN[i];
			k:=k+1;
			i:=i+1;
		аккиыс
			C[k]:=PIN[j];
			k:=k+1;
			j:=j+1;		
		еам-текос
	емосы-текос
	
	еам (i=n+1) тоте /* еНАМТКчХГЙЕ О 1ОР ПъМАЙАР */
		емосы (j<=m) епамакабе
			C[k]:=PIN[j];
			k:=k+1;
			j:=j+1;
		емосы-текос
	аккиыс /* еНАМТКчХГЙЕ О 2ОР ПъМАЙАР */
		емосы (i<=n) епамакабе
			C[k]:=PIN[i];
			k:=k+1;
			i:=i+1;
		емосы-текос
	еам-текос
	
	/* аМТИЦЯАЖч ТОУ C СТОМ PIN */
	k:=1;
	i:=start;
	емосы (i<=finish) епамакабе
		PIN[i]:=C[k];
		i:=i+1;
		k:=k+1;
	емосы-текос
текос-диадийасиас


диадийасиа merge_sort(%PIN,start,finish)
диепажг				
   еисодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
	  start,finish: INTEGER;
   енодос			 
      PIN: ARRAY[1..MAX_N] OF INTEGER;			  
дедолема
	middle: INTEGER;
аявг				
	еам (start<finish) тоте
		еам (start+1=finish) тоте /* 2 СТОИВЕъА */
			еам (PIN[start]>PIN[finish]) тоте
				упокоцисе swap(%PIN[start],%PIN[finish]);
			еам-текос
		аккиыс  /* ПЕЯИССЭТЕЯА АПЭ 2 СТОИВЕъА */
			middle:=(start+finish) DIV 2;
			упокоцисе merge_sort(%PIN,start,middle);
			упокоцисе merge_sort(%PIN,middle+1,finish);
			упокоцисе merge(%PIN,start,finish);
		еам-текос
	еам-текос
текос-диадийасиас








сумаятгсг partition(%PIN,start,finish):INTEGER
диепажг				
	еисодос			 
		PIN: ARRAY[1..MAX_N] OF INTEGER;			  
		start,finish: INTEGER;
	енодос			 
		PIN: ARRAY[1..MAX_N] OF INTEGER;			  
		partition: INTEGER;
	дедолема
		pivot,i,j: INTEGER;
		stop: BOOLEAN;
аявг
	pivot:=PIN[start];
	i:=start-1;
	j:=finish+1;
	stop:=FALSE;
	емосы (stop=FALSE) епамакабе
		епамакабе
			j:=j-1;
		левяи (PIN[j]<=pivot)

		епамакабе
			i:=i+1;
		левяи (PIN[i]>=pivot)
	
		еам (i<j) тоте
			упокоцисе swap(%PIN[i],%PIN[j]);
		аккиыс
			stop:=TRUE;
			partition:=j;
		еам-текос
	емосы-текос
текос-сумаятгсгс



диадийасиа quick_sort(%PIN,start,finish)
диепажг				
	еисодос			 
		PIN: ARRAY[1..MAX_N] OF INTEGER;			  
		start,finish: INTEGER;
	енодос			 
		PIN: ARRAY[1..MAX_N] OF INTEGER;			  
	дедолема
		odigo,middle,pos: INTEGER;
аявг				
	еам (start<finish) тоте
		pos:=partition(%PIN,start,finish); /* дИАЛщЯИСГ ТОУ ПъМАЙА */
		упокоцисе quick_sort(%PIN,start,pos); /* аМАДЯОЛч СТОМ АЯИСТЕЯЭ УПОПъМАЙА */
		упокоцисе quick_sort(%PIN,pos+1,finish);/* аМАДЯОЛч СТОМ ДЕНИЭ УПОПъМАЙА */
	еам-текос
текос-диадийасиас







аявг
	
	тупысе(EOLN, "лецехос пимайа. ");
	SIZE:=get_integer(5,10);

	упокоцисе read_array(%P,SIZE);
	
	упокоцисе print_array(P,SIZE);

	exit2:=FALSE;
	емосы (exit2=FALSE) епамакабе
	
		тупысе(EOLN, "еПщКЕНЕ АКЦЭЯИХЛО: ");
		тупысе(EOLN, "1-тАНИМЭЛГСГ ЛЕ еПИКОЦч ");
		тупысе(EOLN, "2-тАНИМЭЛГСГ ЛЕ еИСАЦЫЦч ");
		тупысе(EOLN, "3-тАНИМЭЛГСГ жУСАКъДАР ");
		тупысе(EOLN, "4-тАНИМЭЛГСГ ЛЕ сУЦВЧМЕУСГ ");
		тупысе(EOLN, "5-цЯчЦОЯГ тАНИМЭЛГСГ ");
		тупысе(EOLN, "6-╦НОДОР ");
		тупысе(EOLN, "еПИКОЦч: ");
		диабасе(in);
		
		еам (in=1) тоте
			упокоцисе selection_sort(%P,SIZE);
		еам-текос

		еам (in=2) тоте
			упокоцисе insertion_sort(%P,SIZE);
		еам-текос	
		
		еам (in=3) тоте
			упокоцисе bubble_sort(%P,SIZE);
		еам-текос	
		
		еам (in=4) тоте
			упокоцисе merge_sort(%P,1,SIZE);
		еам-текос	
		
		еам (in=5) тоте
			упокоцисе quick_sort(%P,1,SIZE);
		еам-текос	
		
		еам (in=6) тоте
			exit2:=TRUE;
		еам-текос		
		
		упокоцисе print_array(P,SIZE);
	емосы-текос
	
текос
